#!/usr/bin/python

import os
import sys
import argparse
import mistune
import yaml
import logging

LOG = logging.getLogger('md-fix-links')


class KeyCheckingLexer(mistune.InlineLexer):
    def __init__(self, *args, **kwargs):
        super(KeyCheckingLexer, self).__init__(*args, **kwargs)
        self.badlinks = []

    def output_reflink(self, m):
        key = mistune._keyify(m.group(2) or m.group(1))
        if key not in self.links:
            self.badlinks.append((key, m))

        return super(KeyCheckingLexer, self).output_reflink(m)


def parse_args():
    p = argparse.ArgumentParser()
    
    p.add_argument('--verbose', '-v',
                   action='store_const',
                   const='INFO',
                   dest='loglevel')
    p.add_argument('--debug', '-d',
                   action='store_const',
                   const='DEBUG',
                   dest='loglevel')

    p.add_argument('--refs', '-r',
            default=os.environ.get('MD_REFS', 'refs.yml'))
    p.add_argument('input', nargs='?')

    p.set_defaults(loglevel='WARN')

    return p.parse_args()


def main():
    args = parse_args()
    logging.basicConfig(level=args.loglevel)

    try:
        with open(args.refs) as fd:
            refs = yaml.load(fd)
            # ensure that all refs are available in lower case
            for k in refs:
                if k.lower() != k:
                    refs[k.lower()] = refs[k]
    except IOError as err:
        print '<!-- failed to open refs: %s -->' % err
        return

    r = mistune.Renderer()
    inline = KeyCheckingLexer(r)
    markdown = mistune.Markdown(r, inline=inline)

    with open(args.input) if args.input else sys.stdin as fd:
        args.input = args.input or '<stdin>'
        markdown(fd.read())

    if inline.badlinks:
        for key, mo in inline.badlinks:
            key = key.lower()
            if key in refs:
                print '[%s]: %s' % (key, refs[key])
            else:
                print '[%s]: MISSING!' % (key)

if __name__ == '__main__':
    sys.exit(main())
